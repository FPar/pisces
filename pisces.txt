-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Reference compiler for a simple language.
--   
--   Please see the README on Github at
--   <a>https://github.com/ob-fun-ws17/studienarbeit-pisces</a>
@package pisces
@version 0.1.0.0


-- | Module which contains the AST for the pisces language.
module Lang

-- | Name of a function of variable.
type Identifier = String

-- | A file is represented by a compilation unit.
newtype CompilationUnit
CompilationUnit :: [Function] -> CompilationUnit

-- | A function declaration and definition.
data Function
Function :: Identifier -> [ParameterDeclaration] -> ReturnType -> Block -> Function

-- | Return type of a function. Nothing means void.
type ReturnType = Maybe Type

-- | A sequence of statements.
newtype Block
Block :: [Statement] -> Block

-- | A complete statement.
data Statement
Declaration :: Identifier -> Type -> (Maybe Expression) -> Statement
Assignment :: Identifier -> Expression -> Statement
Return :: Expression -> Statement
If :: Expression -> Block -> (Maybe Block) -> Statement
Unary :: UnaryOp -> Expression -> Statement

-- | Parameter declaration for a function declaration.
data ParameterDeclaration
ParameterDeclaration :: Identifier -> Type -> ParameterDeclaration

-- | Built-in types.
data Type
I64 :: Type
F64 :: Type

-- | An expression which can be evaluated for use within a statement.
data Expression
Atomic :: Atomic -> Expression
Variable :: String -> Expression
Math :: MathOp -> Expression -> Expression -> Expression
Comparison :: BoolOp -> Expression -> Expression -> Expression
Negate :: Expression -> Expression
Invocation :: String -> [Expression] -> Expression

-- | Unary operators.
data UnaryOp
Increment :: UnaryOp
Decrement :: UnaryOp

-- | Math operators.
data MathOp
Addition :: MathOp
Subtraction :: MathOp
Multiplication :: MathOp
Division :: MathOp
Modulo :: MathOp

-- | Boolean operators.
data BoolOp
Eq :: BoolOp
Ne :: BoolOp
Lt :: BoolOp
Gt :: BoolOp
Le :: BoolOp
Ge :: BoolOp

-- | Atomics within expressions.
data Atomic
Integer :: Integer -> Atomic
Float :: Double -> Atomic
instance GHC.Classes.Eq Lang.CompilationUnit
instance GHC.Show.Show Lang.CompilationUnit
instance GHC.Classes.Eq Lang.Function
instance GHC.Show.Show Lang.Function
instance GHC.Classes.Eq Lang.Block
instance GHC.Show.Show Lang.Block
instance GHC.Classes.Eq Lang.Statement
instance GHC.Show.Show Lang.Statement
instance GHC.Classes.Eq Lang.Expression
instance GHC.Show.Show Lang.Expression
instance GHC.Classes.Eq Lang.Atomic
instance GHC.Show.Show Lang.Atomic
instance GHC.Classes.Eq Lang.BoolOp
instance GHC.Show.Show Lang.BoolOp
instance GHC.Classes.Eq Lang.MathOp
instance GHC.Show.Show Lang.MathOp
instance GHC.Classes.Eq Lang.UnaryOp
instance GHC.Show.Show Lang.UnaryOp
instance GHC.Classes.Eq Lang.ParameterDeclaration
instance GHC.Show.Show Lang.ParameterDeclaration
instance GHC.Classes.Eq Lang.Type
instance GHC.Show.Show Lang.Type


-- | Generates LLVM ASTs.
module Codegen

-- | Generates an LLVM module for the given compilation unit.
genLLVM :: CompilationUnit -> Module


-- | Contains low level parsers for string tokenization.
module Lexer

-- | Wraps the parser in braces.
braces :: () => ParsecT String u Identity a -> ParsecT String u Identity a

-- | Parses ":".
colon :: () => ParsecT String u Identity String

-- | Parses any number of the provided parser seperated by commas.
commaSep :: () => ParsecT String u Identity a -> ParsecT String u Identity [a]

-- | Parses a valid identifier.
identifier :: () => ParsecT String u Identity String

-- | Parses an integer of float literal.
naturalOrFloat :: () => ParsecT String u Identity Either Integer Double

-- | Wraps the parser in parentheses.
parens :: () => ParsecT String u Identity a -> ParsecT String u Identity a

-- | Parses a reserved identifier.
reserved :: () => String -> ParsecT String u Identity ()

-- | Parser a reserver operator.
reservedOp :: () => String -> ParsecT String u Identity ()

-- | Parses "-&gt;".
rightArrow :: () => ParsecT String u Identity String

-- | Parses ";".
semi :: () => ParsecT String u Identity String

-- | Parses the given symbol.
symbol :: () => String -> ParsecT String u Identity String

-- | Parses all sorts of white space.
whiteSpace :: () => ParsecT String u Identity ()


-- | Top level parser for parsing files into an AST.
module Parser

-- | Parses the given file to a compilation unit.
parseUnit :: SourceName -> String -> Either ParseError CompilationUnit
